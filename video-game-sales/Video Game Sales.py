#https://github.com/miracl1e6/clustering/blob/b1f48adde2719702568808ebdd0f4f659423a78b/utils.py
#!/usr/bin/env python
# coding: utf-8

# # Video Game Sales
# data from more than 16,500 games.

# ## Importing Libraries

# In[1]:


import numpy as np
import pandas as pd
import seaborn as sns

import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')

import warnings 
warnings.filterwarnings('ignore')


# ## Loading Data

# In[132]:


videoGameData = pd.read_csv('../input/vgsales.csv', parse_dates=['Year'])


# In[30]:


videoGameData.head()


# ### About Dataset
# This dataset contains a list of video games with sales greater than 100,000 copies. It was generated by a scrape of vgchartz.com.
# 
# Fields include
# 
# * Rank - Ranking of overall sales
# 
# * Name - The games name
# 
# * Platform - Platform of the games release (i.e. PC,PS4, etc.)
# 
# * Year - Year of the game's release
# 
# * Genre - Genre of the game
# 
# * Publisher - Publisher of the game
# 
# * NA_Sales - Sales in North America (in millions)
# 
# * EU_Sales - Sales in Europe (in millions)
# 
# * JP_Sales - Sales in Japan (in millions)
# 
# * Other_Sales - Sales in the rest of the world (in millions)
# 
# * Global_Sales - Total worldwide sales.
# 
# The script to scrape the data is available at https://github.com/GregorUT/vgchartzScrape.

# In[31]:


videoGameData.info()


# In[32]:


videoGameData.describe()


# In[33]:


videoGameData.describe(include='object')


# In[34]:


fig, ax = plt.subplots(2, 2, figsize=(15, 8))
sns.boxplot(videoGameData['NA_Sales'][videoGameData['NA_Sales']<10], palette='PRGn', ax = ax[0, 0])
sns.distplot(videoGameData['NA_Sales'][videoGameData['NA_Sales']<10], ax = ax[1, 0])
sns.boxplot(videoGameData['Global_Sales'][videoGameData['NA_Sales']<10], palette='PRGn', ax = ax[0, 1])
sns.distplot(videoGameData['Global_Sales'][videoGameData['NA_Sales']<10], ax = ax[1, 1])


# ## Data Preprocessing

# In[133]:


videoGameData.isnull().sum()


# In[134]:


videoGameData.dropna(inplace=True)


# In[135]:


videoGameData['Year'] = videoGameData['Year'].dt.to_period('Y')


# In[ ]:





# In[43]:


videoGameData['Year'].value_counts()[:20].plot(kind='bar')
plt.xlabel('Year')
plt.ylabel('Count')


# In[72]:


plt.figure(figsize=(15, 5))
sns.countplot(videoGameData['Genre'])
plt.ylabel('Count')
plt.xlabel('Genre')


# In[74]:


plt.figure(figsize=(15, 5))
sns.countplot(videoGameData['Platform'])
plt.ylabel('Count')
plt.xlabel('Platform')


# In[78]:


plt.figure(figsize=(15, 7))
videoGameData.groupby(by=['Year'])['Global_Sales'].sum().plot(kind='bar')
plt.ylabel('Global sales')


# In[79]:


plt.figure(figsize=(15, 7))
videoGameData.groupby(by=['Platform'])['Global_Sales'].sum().plot(kind='bar')
plt.ylabel('Global sales')


# In[82]:


plt.figure(figsize=(15, 7))
videoGameData.groupby(by=['Genre'])['Global_Sales'].sum().plot(kind='bar')
plt.ylabel('Global sales')


# In[85]:


videoGameData['Publisher'].value_counts()[:25].plot(kind='bar')


# In[126]:


genreCat = {'Action':0,          
            'Sports':1,
            'Misc':2,
            'Role-Playing':3,
            'Shooter': 4,
            'Adventure':5,
            'Racing':6,
            'Platform':7,
            'Simulation':8,
            'Fighting':9,
            'Strategy':10,
            'Puzzle':11   }
videoGameData['Genre'] = videoGameData['Genre'].replace(genreCat)


# In[136]:


videoGameData['Publisher'] = videoGameData['Publisher'].astype('category')


# In[137]:


dict( enumerate(videoGameData['Publisher'].cat.categories ) )


# In[138]:


videoGameData['Publisher'] = videoGameData['Publisher'].cat.codes


# In[128]:


matrix = np.triu(videoGameData.corr(method='spearman'))

plt.figure(figsize=(15, 15))

sns.heatmap(videoGameData.corr(method='spearman'), annot=True,
            fmt='.1f', vmin=-0.3, center=0, cmap='coolwarm', mask=matrix);


# In[129]:


videoGameData.describe()


# In[ ]:




